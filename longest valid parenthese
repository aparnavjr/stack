public class Solution {
    public int LongestValidParentheses(string s) {
        
        if(s == null || String.IsNullOrEmpty(s))
            return 0;
            
        Stack<int> st= new Stack<int>();
        
        int len = s.Length;
        
        int i =0;
        
        int last = -1;
        
        int max = 0;
        
        while(i < len)
        {
            
            if(s[i] == '(')
                st.Push(i);
            
            else
              {
                  if(st.Count == 0)
                  {
                      last = i;
                  }
                  
                  else
                  {
                      st.Pop();
                      if(st.Count == 0)
                      {
                          max = Math.Max(max, i - last);
                          
                      }
                      
                      else
                      {
                          max = Math.Max(max,i-st.Peek());
                      }
                  }
                  
              }
         i++;   
        }
        
        return max;
    }
}
